{"version":3,"sources":["logic/index.js","component/Cell.js","component/Minesweeper.js","index.js","registerServiceWorker.js"],"names":["getMinesCount","level","initData","x","getHorSize","y","getVerSize","data","Array","i","j","flag","mine","surroundingMineCount","checked","minesCount","length","n","array","count","Math","floor","random","temp","num","row","col","installMines","fillSurroundingMineCount","getCellColor","Cell","react_default","a","createElement","className","onClick","this","props","onContextMenu","renderContent","_this$props","cell","status","color","style","Fragment","backgroundColor","width","height","src","alt","position","top","left","transform","React","Component","Minesweeper","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultLevel","state","time","flagsCount","gameStarted","openedCellCount","interval","e","parseInt","target","value","isNaN","resetGame","clearInterval","setState","_ref","console","log","_this2","_this$state","statusImg","setLevel","bind","type","name","flex","margin","display","padding","map","idxr","key","idxc","src_component_Cell","cellClick","indexRow","indexColumn","preventDefault","nativeEvent","button","slice","openCell","setInterval","increaseTime","r","c","retval","defaultProps","ReactDOM","render","src_component_Minesweeper","document","getElementById","navigator","window","addEventListener","swUrl","concat","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.933c6f23.chunk.js","sourcesContent":["export function getHorSize(level) {\n  if (level === 1) {\n    return 9;\n  } else if (level === 2) {\n    return 16;\n  } else {\n    return 30;\n  }\n}\n\nexport function getVerSize(level) {\n  if (level === 1) {\n    return 9;\n  } else if (level === 2) {\n    return 16;\n  } else {\n    return 16;\n  }\n}\n\nexport function getMinesCount(level) {\n  if (level === 1) {\n    return 10;\n  } else if (level === 2) {\n    return 40;\n  } else {\n    return 99;\n  }\n}\n\nexport function initData(level) {\n  let x = getHorSize(level);\n  let y = getVerSize(level);\n\n  let data = new Array(y);\n  for (let i = 0; i < y; i++) {\n    data[i] = new Array(x);\n  }\n\n  for (let i = 0; i < y; i++) {\n    for (let j = 0; j < x; j++) {\n      data[i][j] = {\n        flag: false,\n        mine: false,\n        surroundingMineCount: 0,\n        checked: false\n      };\n    }\n  }\n\n  installMines(data, getMinesCount(level));\n  fillSurroundingMineCount(data, x, y);\n  return data;\n}\n\nfunction fillSurroundingMineCount(data, x, y) {\n  for (let i = 0; i < y; i++) {\n    for (let j = 0; j < x; j++) {\n      if (data[i][j].mine) {\n        if (i > 0) {\n          if (j > 0) {\n            data[i - 1][j - 1].surroundingMineCount += 1;\n          }\n          if (j < x - 1) {\n            data[i - 1][j + 1].surroundingMineCount += 1;\n          }\n          data[i - 1][j].surroundingMineCount += 1;\n        }\n        if (i < y - 1) {\n          if (j > 0) {\n            data[i + 1][j - 1].surroundingMineCount += 1;\n          }\n          if (j < x - 1) {\n            data[i + 1][j + 1].surroundingMineCount += 1;\n          }\n          data[i + 1][j].surroundingMineCount += 1;\n        }\n        if (j > 0) {\n          data[i][j - 1].surroundingMineCount += 1;\n        }\n        if (j < x - 1) {\n          data[i][j + 1].surroundingMineCount += 1;\n        }\n      }\n    }\n  }\n}\n\nfunction installMines(data, minesCount) {\n  let y = data.length;\n  let x = data[0].length;\n  let n = x * y;\n\n  let array = new Array(n);\n  for (let i = 0; i < n; i++) {\n    array[i] = i;\n  }\n\n  // Run limited iteration of Fisher Yates shuffle\n  let count = 0;\n  for (let i = array.length - 1; count < minesCount; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    count++;\n  }\n\n  for (let i = 0; i < minesCount; i++) {\n    let num = array[n - 1 - i];\n    let row = Math.floor(num / x);\n    let col = num % x;\n    data[row][col].mine = true;\n  }\n}\n\nexport function check(r, c, data) {\n  let cell = data[r][c];\n  if (cell.checked) {\n    return 0;\n  }\n\n  let retval = 1;\n  cell.checked = true;\n  if (cell.surroundingMineCount > 0) {\n    return retval;\n  } else {\n    if (r > 0) {\n      if (c > 0) {\n        retval += check(r - 1, c - 1, data);\n      }\n      if (c < data[0].length - 1) {\n        retval += check(r - 1, c + 1, data);\n      }\n      retval += check(r - 1, c, data);\n    }\n    if (r < data.length - 1) {\n      if (c > 0) {\n        retval += check(r + 1, c - 1, data);\n      }\n      if (c < data[0].length - 1) {\n        retval += check(r + 1, c + 1, data);\n      }\n      retval += check(r + 1, c, data);\n    }\n    if (c > 0) {\n      retval += check(r, c - 1, data);\n    }\n    if (c < data[0].length - 1) {\n      retval += check(r, c + 1, data);\n    }\n    return retval;\n  }\n}\n\nexport function getCellColor(num) {\n  if (num === 1) {\n    return \"blue\";\n  } else if (num === 2) {\n    return \"green\";\n  } else if (num === 3) {\n    return \"red\";\n  } else if (num === 4) {\n    return \"#000099\";\n  } else if (num === 5) {\n    return \"brown\";\n  } else if (num === 6) {\n    return \"#3399ff\";\n  } else if (num === 7) {\n    return \"black\";\n  } else if (num === 8) {\n    return \"grey\";\n  }\n}\n","import React from \"react\";\r\nimport \"./Cell.css\";\r\nimport { getCellColor } from \"../logic\";\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        onClick={this.props.onClick}\r\n        onContextMenu={this.props.onClick}\r\n      >\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderContent() {\r\n    const { cell, status } = this.props;\r\n    if (status === 0 || status === 1) {\r\n      if (!cell.checked) {\r\n        return (\r\n          <>\r\n            <img\r\n              style={{\r\n                backgroundColor: \"transparent\",\r\n                width: \"100%\",\r\n                height: \"100%\"\r\n              }}\r\n              src=\"img/tile.png\"\r\n              alt=\"\"\r\n            />\r\n            {cell.flag && (\r\n              <img\r\n                src=\"img/flag.png\"\r\n                alt=\"\"\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"50%\",\r\n                  left: \"50%\",\r\n                  transform: \"translate(-50%, -50%)\"\r\n                }}\r\n              />\r\n            )}\r\n          </>\r\n        );\r\n      } else {\r\n        if (cell.surroundingMineCount > 0) {\r\n          let color = getCellColor(cell.surroundingMineCount);\r\n          return (\r\n            <div style={{ color: color }}>{cell.surroundingMineCount}</div>\r\n          );\r\n        } else {\r\n          return <div> </div>;\r\n        }\r\n      }\r\n    } else if (status === 2) {\r\n      if (cell.mine) {\r\n        if (!cell.checked) {\r\n          return <img src=\"img/mine.png\" alt=\"\" />;\r\n        } else {\r\n          return <img src=\"img/explodedMine.png\" alt=\"\" />;\r\n        }\r\n      } else {\r\n        if (cell.surroundingMineCount > 0) {\r\n          const color = getCellColor(cell.surroundingMineCount);\r\n          return <div style={{ color }}>{cell.surroundingMineCount}</div>;\r\n        } else {\r\n          return <div> </div>;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport \"./Minesweeper.css\";\r\nimport Cell from \"./Cell\";\r\nimport { initData, getMinesCount } from \"../logic\";\r\n\r\nclass Minesweeper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let data = initData(props.defaultLevel);\r\n\r\n    this.state = {\r\n      level: props.defaultLevel,\r\n      status: 0, //0: play, 1: win, 2: lose\r\n      time: 0,\r\n      flagsCount: 0,\r\n      gameStarted: false,\r\n      data: data,\r\n      openedCellCount: 0,\r\n      interval: null\r\n    };\r\n  }\r\n\r\n  setLevel(e) {\r\n    let level = parseInt(e.target.value, 10);\r\n    if (!isNaN(level)) {\r\n      this.resetGame(parseInt(e.target.value, 10));\r\n    }\r\n  }\r\n\r\n  resetGame(level) {\r\n    this.state.interval && clearInterval(this.state.interval);\r\n    this.setState({\r\n      time: 0,\r\n      flagsCount: 0,\r\n      level: level,\r\n      data: initData(level),\r\n      status: 0,\r\n      openedCellCount: 0,\r\n      interval: null\r\n    });\r\n  }\r\n\r\n  increaseTime() {\r\n    this.setState(({ time }) => ({ time: time + 1 }));\r\n    console.log(\"Time\");\r\n  }\r\n\r\n  render() {\r\n    const { status, level } = this.state;\r\n    let statusImg = \"img/smiley.png\";\r\n    if (status === 1) {\r\n      statusImg = \"img/win.png\";\r\n    } else if (status === 2) {\r\n      statusImg = \"img/lose.png\";\r\n    }\r\n    return (\r\n      <div className=\"Minesweeper\">\r\n        <div className=\"MinesweeperLevelBar\">\r\n          <form onClick={this.setLevel.bind(this)}>\r\n            <div>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"1\"\r\n                name=\"level\"\r\n                checked={level === 1 ? \"checked\" : null}\r\n              />\r\n              Easy\r\n            </div>\r\n            <div>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"2\"\r\n                name=\"level\"\r\n                checked={level === 2 ? \"checked\" : null}\r\n              />\r\n              Medium\r\n            </div>\r\n            <div>\r\n              <input\r\n                type=\"radio\"\r\n                value=\"3\"\r\n                name=\"level\"\r\n                checked={level === 3 ? \"checked\" : null}\r\n              />\r\n              Hard\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"MinesweeperInfoBar\">\r\n          <div>Time: {this.state.time}</div>\r\n          <div style={{ flex: 0, margin: \"5px\" }}>\r\n            <button\r\n              style={{\r\n                backgroundColor: \"transparent\",\r\n                display: \"flex\",\r\n                padding: \"5px\"\r\n              }}\r\n            >\r\n              <img\r\n                src={statusImg}\r\n                alt=\"\"\r\n                onClick={this.resetGame.bind(this, level)}\r\n              />\r\n            </button>\r\n          </div>\r\n          <div>\r\n            Remaining: {getMinesCount(this.state.level) - this.state.flagsCount}\r\n          </div>\r\n        </div>\r\n        <div className=\"MinesweeperGrid\">\r\n          {this.state.data.map((row, idxr) => {\r\n            return (\r\n              <div className=\"MinesweeperGridRow\" key={idxr}>\r\n                {row.map((cell, idxc) => {\r\n                  return (\r\n                    <Cell\r\n                      cell={this.state.data[idxr][idxc]}\r\n                      key={idxc}\r\n                      status={status}\r\n                      onClick={this.cellClick.bind(this, idxr, idxc)}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  cellClick(indexRow, indexColumn, e) {\r\n    if (this.state.status === 0) {\r\n      e.preventDefault();\r\n      if (e.nativeEvent.button === 0) {\r\n        if (this.state.data[indexRow][indexColumn].flag) {\r\n          return;\r\n        }\r\n        let data = this.state.data.slice();\r\n\r\n        let status = 0;\r\n        let openedCellCount = this.state.openedCellCount;\r\n        let interval = this.state.interval;\r\n        if (data[indexRow][indexColumn].mine) {\r\n          status = 2;\r\n          if (interval != null) {\r\n            clearInterval(interval);\r\n          }\r\n          interval = null;\r\n          data[indexRow][indexColumn].checked = true;\r\n        } else {\r\n          openedCellCount += this.openCell(indexRow, indexColumn, data);\r\n          if (interval === null) {\r\n            interval = setInterval(this.increaseTime.bind(this), 1000);\r\n          }\r\n        }\r\n\r\n        if (\r\n          openedCellCount + getMinesCount(this.state.level) ===\r\n          data.length * data[0].length\r\n        ) {\r\n          status = 1;\r\n          if (interval != null) {\r\n            clearInterval(interval);\r\n          }\r\n          interval = null;\r\n        }\r\n\r\n        this.setState({\r\n          data,\r\n          status,\r\n          openedCellCount,\r\n          interval\r\n        });\r\n      } else if (e.nativeEvent.button === 2) {\r\n        let data = this.state.data.slice();\r\n        let flag = data[indexRow][indexColumn].flag;\r\n        let flagsCount;\r\n        if (!flag) {\r\n          data[indexRow][indexColumn].flag = true;\r\n          flagsCount = this.state.flagsCount + 1;\r\n        } else {\r\n          data[indexRow][indexColumn].flag = false;\r\n          flagsCount = this.state.flagsCount - 1;\r\n        }\r\n        this.setState({ data: data, flagsCount: flagsCount });\r\n      }\r\n    }\r\n  }\r\n\r\n  openCell(r, c, data) {\r\n    let cell = data[r][c];\r\n    if (cell.checked) {\r\n      return 0;\r\n    }\r\n\r\n    let retval = 1;\r\n    cell.checked = true;\r\n    if (cell.surroundingMineCount > 0) {\r\n      return retval;\r\n    } else {\r\n      if (r > 0) {\r\n        if (c > 0) {\r\n          retval += this.openCell(r - 1, c - 1, data);\r\n        }\r\n        if (c < data[0].length - 1) {\r\n          retval += this.openCell(r - 1, c + 1, data);\r\n        }\r\n        retval += this.openCell(r - 1, c, data);\r\n      }\r\n      if (r < data.length - 1) {\r\n        if (c > 0) {\r\n          retval += this.openCell(r + 1, c - 1, data);\r\n        }\r\n        if (c < data[0].length - 1) {\r\n          retval += this.openCell(r + 1, c + 1, data);\r\n        }\r\n        retval += this.openCell(r + 1, c, data);\r\n      }\r\n      if (c > 0) {\r\n        retval += this.openCell(r, c - 1, data);\r\n      }\r\n      if (c < data[0].length - 1) {\r\n        retval += this.openCell(r, c + 1, data);\r\n      }\r\n      return retval;\r\n    }\r\n  }\r\n}\r\n\r\nMinesweeper.defaultProps = {\r\n  defaultLevel: 1\r\n};\r\n\r\nMinesweeper.propTypes = {\r\n  defaultLevel: PropTypes.number\r\n};\r\n\r\nexport default Minesweeper;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Minesweeper from './component/Minesweeper';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<Minesweeper />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}